{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport TandC from \"./TandC.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      balanceOf: 0,\n      totalSupply: 0,\n      maxMint: 0,\n      price: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        let account = await web3.eth.getAccounts();\n        account = account[0].toLowerCase(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TamaNFT.networks[networkId];\n        const instance = new web3.eth.Contract(TamaNFT.abi, deployedNetwork && deployedNetwork.address);\n        let balanceOf = await instance.methods.balanceOf(account).call();\n        let totalSupply = await instance.methods.totalSupply().call();\n        let maxMint = await instance.methods.MAX_MINT().call();\n        let price = await instance.methods.price().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account,\n          contract: instance,\n          balanceOf,\n          totalSupply,\n          maxMint,\n          price\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.mint = async () => {\n      let mintAmount = document.getElementById(\"mint-amount\").value;\n      await this.state.contract.methods.mint(mintAmount).send({\n        from: this.state.account,\n        value: this.state.price * mintAmount\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        class: \"loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/tandc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TandC, {\n      web3: this.state.web3,\n      account: this.state.account,\n      networkId: this.state.networkdId,\n      kclInstance: this.state.kclInstance,\n      ipfs: this.state.ipfs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js"],"names":["React","Component","TamaNFT","getWeb3","BrowserRouter","Router","Switch","Route","TandC","App","state","storageValue","web3","accounts","contract","balanceOf","totalSupply","maxMint","price","componentDidMount","account","eth","getAccounts","toLowerCase","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","methods","call","MAX_MINT","setState","error","alert","console","mint","mintAmount","document","getElementById","value","send","from","render","networkdId","kclInstance","ipfs"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport TandC from \"./TandC.js\"\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, balanceOf: 0, totalSupply: 0, maxMint: 0, price: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      let account = await web3.eth.getAccounts();\n      account = account[0].toLowerCase();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = TamaNFT.networks[networkId];\n      const instance = new web3.eth.Contract(\n        TamaNFT.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let balanceOf = await instance.methods.balanceOf(account).call();\n      let totalSupply = await instance.methods.totalSupply().call();\n      let maxMint = await instance.methods.MAX_MINT().call();\n      let price = await instance.methods.price().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, account, contract: instance, balanceOf, totalSupply, maxMint, price });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  mint = async () => {\n    let mintAmount = document.getElementById(\"mint-amount\").value;\n    await this.state.contract.methods.mint(mintAmount).send({from: this.state.account, value: this.state.price*mintAmount});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return (<div class=\"loader\"></div>);\n    }\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path='/tandc'>\n              <TandC web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} kclInstance={this.state.kclInstance} ipfs={this.state.ipfs} />\n            </Route>\n          </Switch>\n        </Router> \n  \n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}