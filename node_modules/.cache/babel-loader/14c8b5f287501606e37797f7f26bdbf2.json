{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      balanceOf: 0,\n      totalSupply: 0,\n      maxMint: 0,\n      price: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        let account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        account = account[0].toLowerCase(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TamaNFT.networks[networkId];\n        const instance = new web3.eth.Contract(TamaNFT.abi, deployedNetwork && deployedNetwork.address);\n        let balanceOf = await instance.methods.balanceOf(account).call();\n        let totalSupply = await instance.methods.totalSupply().call();\n        let maxMint = await instance.methods.MAX_MINT().call();\n        let price = await instance.methods.price().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account,\n          contract: instance,\n          balanceOf,\n          totalSupply,\n          maxMint,\n          price\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.mint = async () => {\n      let mintAmount = document.getElementById(\"mint-amount\").value;\n      await this.state.contract.methods.mint(mintAmount).send({\n        from: this.state.account,\n        value: this.state.price * mintAmount\n      });\n      window.location.reload();\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n      href: \"http://www.dappuniversity.com/bootcamp\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      class: \"App-logo\",\n      src: \"https://bafybeic6ma3negyicvyiw234kqlbvrxdvpo7stwdygjw3axis5alaqod7u.ipfs.infura-ipfs.io/1.png\",\n      alt: \"app-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), \"Tama Mint\"), React.createElement(\"div\", {\n      id: \"user-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      id: \"account\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.account)), React.createElement(\"small\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      id: \"account-short\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.account.substring(0, 7), \"...\")))), React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Mint TAMA Monster Club NFTs!\"), React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Contract Address!\"), React.createElement(\"main\", {\n      role: \"main\",\n      className: \"col-lg-12 d-flex text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.totalSupply, \"/\", this.state.maxMint, \" NFTs minted so far.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"You have currently minted \", this.state.balanceOf, \" NFTs\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"You can only mint 20 NFTs maximum.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"The price to mint is \", this.state.price / 10 ** 18, \" ether\"), React.createElement(\"input\", {\n      id: \"mint-amount\",\n      class: \"change\",\n      placeholder: \"Enter Number of NFTs to mint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"mint\",\n      class: \"change-button\",\n      onClick: () => this.mint(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Mint\"))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js"],"names":["React","Component","TamaNFT","getWeb3","App","state","storageValue","web3","accounts","contract","balanceOf","totalSupply","maxMint","price","componentDidMount","account","window","ethereum","request","method","toLowerCase","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","methods","call","MAX_MINT","setState","error","alert","console","mint","mintAmount","document","getElementById","value","send","from","location","reload","render","substring"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, balanceOf: 0, totalSupply: 0, maxMint: 0, price: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      let account = await window.ethereum.request({ method: 'eth_accounts' });\n      account = account[0].toLowerCase();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = TamaNFT.networks[networkId];\n      const instance = new web3.eth.Contract(\n        TamaNFT.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let balanceOf = await instance.methods.balanceOf(account).call();\n      let totalSupply = await instance.methods.totalSupply().call();\n      let maxMint = await instance.methods.MAX_MINT().call();\n      let price = await instance.methods.price().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, account, contract: instance, balanceOf, totalSupply, maxMint, price });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  mint = async () => {\n    let mintAmount = document.getElementById(\"mint-amount\").value;\n    await this.state.contract.methods.mint(mintAmount).send({from: this.state.account, value: this.state.price*mintAmount});\n    window.location.reload()\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div>\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img class=\"App-logo\" src=\"https://bafybeic6ma3negyicvyiw234kqlbvrxdvpo7stwdygjw3axis5alaqod7u.ipfs.infura-ipfs.io/1.png\" alt=\"app-logo\"/>\n          Tama Mint\n        </a>\n\n        <div id=\"user-info\">\n          <small className='text-secondary'>\n            <small id='account'>{this.state.account}</small>\n          </small>\n          <small className='text-secondary'>\n            <small id='account-short'>{this.state.account.substring(0, 7)}...</small>\n          </small> \n        </div>\n\n      </nav>\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n        <h1 id=\"title\">Mint TAMA Monster Club NFTs!</h1>\n        <h1 id=\"title\">Contract Address!</h1>\n\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n            <div class=\"container\">\n              <h1>{this.state.totalSupply}/{this.state.maxMint} NFTs minted so far.</h1>\n              <p>You have currently minted {this.state.balanceOf} NFTs</p>\n              <p>You can only mint 20 NFTs maximum.</p>\n              <p>The price to mint is {this.state.price/10**18} ether</p>\n              <input id=\"mint-amount\" class=\"change\" placeholder=\"Enter Number of NFTs to mint\"></input>\n              <button id=\"mint\" class=\"change-button\" onClick={() => this.mint()}>Mint</button>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}