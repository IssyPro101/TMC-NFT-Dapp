{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      balanceOf: 0,\n      totalSupply: 0,\n      maxMint: 0,\n      price: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        let account = await web3.eth.getAccounts();\n        account = account[0].toLowerCase(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TamaNFT.networks[networkId];\n        const instance = new web3.eth.Contract(TamaNFT.abi, deployedNetwork && deployedNetwork.address);\n        let balanceOf = await instance.methods.balanceOf(account).call();\n        let totalSupply = await instance.methods.totalSupply().call();\n        let maxMint = await instance.methods.MAX_MINT().call();\n        let price = await instance.methods.price().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account,\n          contract: instance,\n          balanceOf,\n          totalSupply,\n          maxMint,\n          price\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.mint = async () => {\n      let mintAmount = document.getElementById(\"mint-amount\").value;\n      await this.state.contract.methods.mint(mintAmount).send({\n        from: this.state.account,\n        value: this.state.price * mintAmount\n      });\n      window.location.reload();\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-dark flex-md-nowrap p-0 shadow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n      href: \"http://www.dappuniversity.com/bootcamp\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"TAMA MONSTER CLUB\")), React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"first-image\",\n      src: \"TAMA-Twitter-Header.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      id: \"black\",\n      role: \"main\",\n      className: \"col-lg-12 d-flex text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Mint TAMA Monster Club NFTs!\"), React.createElement(\"a\", {\n      id: \"link\",\n      href: \"https://rinkeby.etherscan.io/address/\".concat(this.state.contract._address),\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Contract Address\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      id: \"link\",\n      href: \"https://testnets.opensea.io/collection/tama-monster-club-v2\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"OpenSea Collection\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.totalSupply, \"/\", this.state.maxMint, \" NFTs minted so far.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"You have currently minted \", this.state.balanceOf, \" NFTs\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"You can only mint 20 NFTs maximum.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"The price to mint is \", this.state.price / 10 ** 18, \" ether\"), React.createElement(\"input\", {\n      id: \"mint-amount\",\n      class: \"change\",\n      placeholder: \"Enter Number of NFTs to mint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"mint\",\n      class: \"change-button\",\n      onClick: () => this.mint(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Mint\"))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/TamaNFT/client/src/App.js"],"names":["React","Component","TamaNFT","getWeb3","App","state","storageValue","web3","accounts","contract","balanceOf","totalSupply","maxMint","price","componentDidMount","account","eth","getAccounts","toLowerCase","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","methods","call","MAX_MINT","setState","error","alert","console","mint","mintAmount","document","getElementById","value","send","from","window","location","reload","render","_address"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TamaNFT from \"./contracts/TamaNFT.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, balanceOf: 0, totalSupply: 0, maxMint: 0, price: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      let account = await web3.eth.getAccounts();\n      account = account[0].toLowerCase();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = TamaNFT.networks[networkId];\n      const instance = new web3.eth.Contract(\n        TamaNFT.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let balanceOf = await instance.methods.balanceOf(account).call();\n      let totalSupply = await instance.methods.totalSupply().call();\n      let maxMint = await instance.methods.MAX_MINT().call();\n      let price = await instance.methods.price().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, account, contract: instance, balanceOf, totalSupply, maxMint, price });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  mint = async () => {\n    let mintAmount = document.getElementById(\"mint-amount\").value;\n    await this.state.contract.methods.mint(mintAmount).send({from: this.state.account, value: this.state.price*mintAmount});\n    window.location.reload()\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div>\n      <nav className=\"navbar navbar-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          TAMA MONSTER CLUB\n        </a>\n\n      </nav>\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <img id=\"first-image\" src=\"TAMA-Twitter-Header.jpg\"></img>\n          <main id=\"black\" role=\"main\" className=\"col-lg-12 d-flex text-center\">\n            <div class=\"container\">\n              <h1 id=\"title\">Mint TAMA Monster Club NFTs!</h1>\n              <a id=\"link\" href={`https://rinkeby.etherscan.io/address/${this.state.contract._address}`} target=\"_blank\" rel=\"noopener noreferrer\">Contract Address</a>\n              <br/>\n              <a id=\"link\" href=\"https://testnets.opensea.io/collection/tama-monster-club-v2\" target=\"_blank\" rel=\"noopener noreferrer\">OpenSea Collection</a>\n              <h1>{this.state.totalSupply}/{this.state.maxMint} NFTs minted so far.</h1>\n              <p>You have currently minted {this.state.balanceOf} NFTs</p>\n              <p>You can only mint 20 NFTs maximum.</p>\n              <p>The price to mint is {this.state.price/10**18} ether</p>\n              <input id=\"mint-amount\" class=\"change\" placeholder=\"Enter Number of NFTs to mint\"></input>\n              <button id=\"mint\" class=\"change-button\" onClick={() => this.mint()}>Mint</button>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}